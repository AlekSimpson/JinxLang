// variables 

name: Type = Value // mutable variable 
name!: Type = Value // immutable variable, ! signifies immutability 
x, y, z:Int = 0
i:String // uninitialized variable 

// print statement
print("Hello World")

// conditionals
if condition {
  
} else if { 

} else {
  
}

//Ternary operator 
if a then b else c 

//Range operator 
x:Vector[Int] = 1:10

// Arrays and Vectors 
x: Array[Int] = [0, 1, 2, 3]
v: Vector[Int] = [0, 1, 2, 3]
// A Vector is a one dimensional array, whereas an Array can be multi-dimensional 
x[0] // returns the first element of an array 
x[0:5] // returns the first 6 elements of an array 

// Iterating over an array 
i: Int = 0
method printItems(arr: Array): Nothing {
    arrCount: Int = arr.count() - 1
    if i == arrCount -> return  
    
    print(arr[i])
    i++
    printItems(arr)
}

// Tail recursion is used for loops, while and for loops do not exist 


// Functions 
method greet(person: String):String {
    greeting: String = "Hello, " + person + "!" // return statement not needed, aqua will return the last statement in the function 
}

method greetAgain(person: String): String {
  greeting: String = "Hello again, " + person + "!"
}

print(greet(person: "John"))

method sayHelloWord(): String {
    "Hello, World!"
}

// This is also an example of method overloading 
method greet(person: String, alreadyGreeted: Bool): String {
    if alreadyGreeted {
      alreadyGreeted(person: person)
    }else {
      greet(person: person)
    }
}

// Method without returns 

method greet(person: String) {
  print("Hello " + person + "!")
}

method printAndCount(string: String): String {
  print(string)
  string.count 
}

i: Int = 0
method minMax(arr: Array[Int], min?: Int, max?: Int): (Int, Int) {
    currMin: Int = arr[0]
    currMax: Int = arr[0]
    if arr[i] < currMin {
      currMin = arr[i]
    }else if arr[i] > currMax {
      currMax = arr[i]
    }
    m, n: (Int, Int) = minMax(arr: )
}
